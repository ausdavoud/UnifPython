{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Unif","text":"<p>Unif is a Telegram bot that monitors and notifies users about changes in their university's Learning Management System (LMS). Stay informed about exercise deadlines, online session additions, and other critical updates without constantly checking the LMS portal. Unif bridges the gap between your academic responsibilities and your preferred communication platform.</p> <p>Click to use Unif on Telegram</p> <p>Please note that the live demo only works with lms.ui.ac.ir</p> <p></p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Usage</li> <li>Technologies Used</li> <li>Documentation</li> <li>Contributing</li> <li>Contributors</li> <li>License</li> <li>Change Log</li> <li>Roadmap</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Follow these steps to set up Unif locally:  </p> <ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/ausdavoud/unif.git  \ncd unif\n</code></pre></p> </li> <li> <p>Setup environment variables <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>Obtain a new Telegram Bot Token from Botfather     Go to Botfather and get a bot token by creating a new bot or using an existing one.     Set BOT_TOKEN in .env file:     <pre><code>BOT_TOKEN='7206814144:AAHuiqA7HNmRwK8vmqponfS098sTpocnTQc' # Replace this with our own token\n</code></pre></p> </li> <li> <p>Get a new Django Secret Key     You can set any random string you'd like. Alternatively, generate a new one at djecrety.ir.     Set it in .env file:     <pre><code>SECRET_KEY='44m2da+ru@b-g%^9m3kfv1_^ut9vn%5*v$cj8f!k0(_$pvagd@' # Replace this with our own secret key\n</code></pre></p> </li> <li> <p>Add your VPS IP or domain name     Set <code>PRODUCTION_HOSTNAME</code> environment variable to your VPS IP address or domain (without leading http/https). It will be added to Django <code>ALLOWED_HOSTS</code> and <code>CSRF_TRUSTED_ORIGINS</code>.     <pre><code>PRODUCTION_HOSTNAME=116.125.1.53 # or your_domain.com\n</code></pre></p> </li> <li> <p>Set SSL     If SSL is enabled at your specified domain (the value of <code>PRODUCTION_HOSTNAME</code>), set <code>USE_SSL</code> to True:     <pre><code>USE_SSL=True\n</code></pre></p> </li> <li> <p>Run the docker containers: <pre><code>docker compose up -d\n</code></pre></p> </li> </ol> <p>Additionally, you can create a superuser for you Django admin panel. First ssh into your VPS and then: <pre><code>docker compose exec web bash\n. venv/bin/activate\ncd src\npython manage.py createsuperuser\n# set user name and password\nexit\n</code></pre> You'll be able to visit your admin panel at <code>your_domain_or_IP.com/americano-coffee</code>. (It's also a best practice to change the admin panel url at src/core_config/urls.py)</p>"},{"location":"#usage","title":"Usage","text":"<p>Send <code>/login</code> to your newly created bot and provide your LMS username and password. Unif will periodically check LMS every 5 minutes. </p>"},{"location":"#technologies-used","title":"Technologies Used","text":"<ul> <li>Django: Web framework for rapid development and clean design.  </li> <li>Celery: Distributed task queue for handling asynchronous jobs.  </li> <li>Redis: Message broker for Celery task management.  </li> <li>aiogram: A modern and fully asynchronous framework for Telegram Bot API </li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>View docs.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! To get started:</p> <ol> <li>Fork the repository.</li> <li>Create a feature branch: git checkout -b feature-name.</li> <li>Commit your changes: git commit -m \"Add feature\".</li> <li>Push to your branch: git push origin feature-name.</li> <li>Submit a pull request.</li> </ol>"},{"location":"#contributors","title":"Contributors","text":"<p>Davoud</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the license file for details.</p>"},{"location":"#change-log","title":"Change Log","text":"<p>1.0.0-alpha - Initial release</p>"},{"location":"#roadmap","title":"Roadmap","text":""},{"location":"#authentication-user-management","title":"Authentication &amp; User Management","text":"<ul> <li> Convert bot login to service architecture</li> <li> Hash user passwords in storage</li> <li> Add <code>/delete_my_data</code> command with periodic task cleanup</li> <li> Store author_id | lmsuser mapping</li> <li> Add <code>/set_chat_id</code> command</li> <li> Implement <code>/get_chat_id</code> command</li> <li> Implement notifications for unsuccessful login attempts</li> </ul>"},{"location":"#docker-deployment","title":"Docker &amp; Deployment","text":"<ul> <li> Configure docker volumes for venv, staticfiles, and media</li> <li> Set up Dokploy integration</li> <li> Create GitHub releases workflow</li> <li> Configure SSL backend</li> </ul>"},{"location":"#frontend-enhancements-htmx","title":"Frontend Enhancements (HTMX)","text":"<ul> <li> Chat ID management interface</li> <li> Interval configuration interface</li> <li> Active course dashboard with manual update triggers</li> <li> Account deletion interface</li> </ul>"},{"location":"#backend-improvements","title":"Backend Improvements","text":"<ul> <li> Implement change_interval API</li> <li> Migrate to Python-first approach</li> <li> Refactor atomic transactions:</li> <li> Replace chain patterns with standard functions</li> <li> Ensure atomic operation integrity</li> </ul>"},{"location":"#notifications-task-processing","title":"Notifications &amp; Task Processing","text":"<ul> <li> Create Django admin command for batch Telegram notifications</li> <li> Develop Celery command to send pending messages (is_sent=false)</li> <li> Configure Celery retry mechanism</li> </ul>"},{"location":"#quality-documentation","title":"Quality &amp; Documentation","text":"<ul> <li> Comprehensive logging system</li> <li> Serve documentation</li> <li> Complete README documentation</li> <li> Implement test suite with coverage targets</li> </ul>"},{"location":"logic-flowchart/","title":"Logic Flowchart","text":"<pre><code>flowchart TD\n  %% Main User Login Flow\n  subgraph user_login[\"User Login Process\"]\n    A[User login] --&gt; A1{Is user new?}\n    A1 --&gt;|Yes| get_new_cookie\n    get_new_cookie --&gt; A3[New celery task: scrape_course_codes]\n    A3 --&gt; WORKER_scrape_course_codes\n    WORKER_scrape_course_codes --&gt; A4[New celery task: scrape_course]\n    A4 --&gt; WORKER_scrape_course\n    WORKER_scrape_course --&gt; A5[New celery task: send_notif]\n    A5 --&gt; send_notif\n  end\n\n  %% Cookie Management Process\n  subgraph get_new_cookie[\"Get New Cookie\"]\n    C1[Post request to LMS /login api] --&gt; C2{Is response.status == 302?}\n    C2 --&gt;|Yes| D[Store cookie in DB]\n    C2 --&gt;|No| E[Wrong Username or Password]\n  end\n\n  %% Cookie Validation Process\n  subgraph get_cookie[\"Get Cookie\"]\n    D1[Get cookie from db] --&gt; D2[Send get request to /members/home]\n    subgraph is_cookie_valid[\"Cookie Validation\"]\n      D2 --&gt; D3{Is response.status == 302?}\n      D3 --&gt;|Yes| D4[Cookie is invalid]\n      D3 --&gt;|No| D5[Cookie is valid]\n    end\n    D4 --&gt; get_new_cookie\n  end\n\n  %% Worker Processes\n  subgraph WORKER_scrape_course_codes[\"WORKER_scrape_course_codes (every 12 hours)\"]\n    B1[Get cookie] --&gt; get_cookie\n    get_cookie --&gt; B2[Get /members/home]\n    B2 --&gt; B3[Find course codes in the page]\n    B3 --&gt; B4[Mark as active, uncheck previously active ones]\n  end\n\n  subgraph WORKER_scrape_course[\"WORKER_scrape_course (every 5 minutes)\"]\n    E1[Get cookie] --&gt; get_cookie\n    get_cookie --&gt; E2[Get /groups/code]\n    E2 --&gt; E3[Scrape all messages]\n    E3 --&gt; E4[Compare messages to db, create notifications, create new worker]\n  end\n\n  subgraph send_notif[\"send_notif (triggered by WORKER_scrape_course)\"]\n    F1[Get notif and env from function params] --&gt; F2[Send notification]\n  end</code></pre>"},{"location":"adrs/0000-celery-vs-aiohttp-LMS/","title":"Celery vs. Aiohttp for LMS","text":""},{"location":"adrs/0000-celery-vs-aiohttp-LMS/#context-and-problem-statement","title":"Context and Problem Statement","text":"<ol> <li>Should we consider scraping courses on LMS in different celery tasks, or one celery task which includes asynchronous http requests?</li> </ol>"},{"location":"adrs/0000-celery-vs-aiohttp-LMS/#considered-options","title":"Considered Options","text":"<ul> <li>Use a different celery task for each request to LMS.</li> <li>Use a single celery task which includes async requests to LMS.</li> </ul>"},{"location":"adrs/0000-celery-vs-aiohttp-LMS/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Use a single celery task which includes async requests to LMS\".</p>"},{"location":"adrs/0000-celery-vs-aiohttp-LMS/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0000-celery-vs-aiohttp-LMS/#use-a-different-celery-task-for-each-request-to-lms","title":"Use a different celery task for each request to LMS","text":"<ul> <li>Good, because celery has built-in reload strategy.</li> <li>Good, because if one request fails, others don't.</li> <li>Bad, because each task creates a different session, acquires memory and adds overload.</li> <li>Bad, because this task (scraping LMS) run on short intervals (5 min).</li> </ul>"},{"location":"adrs/0000-celery-vs-aiohttp-LMS/#use-a-single-celery-task-which-includes-async-requests-to-lms","title":"Use a single celery task which includes async requests to LMS.","text":"<ul> <li>Good, it imposes less overload to server.</li> <li>Bad, because it requires making a retry-strategy.</li> </ul>"},{"location":"adrs/0000-celery-vs-aiohttp-LMS/#more-information","title":"More Information","text":"<p>I chose the first option because on large scales, e.g. having 100 users, running this task every 5 minutes (or even less) on a new celery worker requires a lot of resources (1400 celery tasks per minute). This decisions is apposed to the next one, where sending notifications to telegram only happens if there is a new message (contrary to this task which must run every x minutes, regardless of actually having new messages on LMS or not). Plus, each student can have at most 14 courses each semester, and sending 14 async request in a session is not a big deal for aiohttp. I give up on the retry strategy, but might implement one that Grok suggested (decorator-styled). Last but not least, I want to refresh the asyncio knowledge and explore the pitfalls.</p>"},{"location":"adrs/0001-celery-vs-aiohttp-telegram/","title":"Celery vs. Aiohttp for Telegram","text":""},{"location":"adrs/0001-celery-vs-aiohttp-telegram/#context-and-problem-statement","title":"Context and Problem Statement","text":"<ol> <li>Should we consider sending notifications to Telegram in different celery tasks, or one celery task which includes asynchronous http requests?</li> </ol>"},{"location":"adrs/0001-celery-vs-aiohttp-telegram/#considered-options","title":"Considered Options","text":"<ul> <li>Use a different celery task for each notification.</li> <li>Use a single celery task which includes async requests to Telegram API.</li> </ul>"},{"location":"adrs/0001-celery-vs-aiohttp-telegram/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Use a different celery task for each notification\".</p>"},{"location":"adrs/0001-celery-vs-aiohttp-telegram/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/0001-celery-vs-aiohttp-telegram/#use-a-different-celery-task-for-each-notification","title":"Use a different celery task for each notification","text":"<ul> <li>Good, because celery has built-in reload strategy.</li> <li>Good, because if one request fails, others don't.</li> <li>Bad, because each task creates a different session, acquires memory and adds overload.</li> </ul>"},{"location":"adrs/0001-celery-vs-aiohttp-telegram/#use-a-single-celery-task-which-includes-async-requests-to-telegram-api","title":"Use a single celery task which includes async requests to Telegram API","text":"<ul> <li>Good, it imposes less overload to server.</li> <li>Bad, because it requires making a retry-strategy.</li> </ul>"},{"location":"adrs/0001-celery-vs-aiohttp-telegram/#more-information","title":"More Information","text":"<p>I chose the first option because reliability on user-end is important and celery has built-in retry strategies that help this.  This way, if a request fails, I'm sure that others are not cancelled consequently. Last but not least, I want to explore celery and see what happens when we distribute tasks over many celery workers.</p> <p>I should set a Celery rate_limit (e.g., \u201c20/m\u201d for 20 tasks per minute) to comply with Telegram\u2019s API limits.</p>"},{"location":"adrs/template/","title":"{short title, representative of solved problem and found solution}","text":""},{"location":"adrs/template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story. You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"adrs/template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> </ul>"},{"location":"adrs/template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"adrs/template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adrs/template/#title-of-option-1","title":"{title of option 1}","text":"<ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> </ul>"},{"location":"adrs/template/#title-of-other-option","title":"{title of other option}","text":"<ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"adrs/template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or document the team agreement on the decision and/or define when/how this decision the decision should be realized and if/when it should be re-visited. Links to other decisions and resources might appear here as well.}</p>"},{"location":"bot/bot_main/","title":"bot.main","text":""},{"location":"bot/bot_main/#src.bot.main.cancel_handler","title":"<code>cancel_handler(message, state)</code>  <code>async</code>","text":"<p>Allow the user to cancel any action</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The cancel command (/cancel)</p> required <code>state</code> <code>FSMContext</code> <p>The state in which the user is</p> required Source code in <code>src/bot/main.py</code> <pre><code>@form_router.message(Command(\"cancel\"))\n@form_router.message(F.text.casefold() == \"cancel\")\nasync def cancel_handler(message: Message, state: FSMContext) -&gt; None:\n    \"\"\"Allow the user to cancel any action\n\n    Args:\n        message (Message): The cancel command (/cancel)\n        state (FSMContext): The state in which the user is\n    \"\"\"\n\n    current_state = await state.get_state()\n    if current_state is None:\n        return\n\n    logging.info(\"Cancelling state %r\", current_state)\n    await state.clear()\n    await message.answer(\n        \"\u0639\u0645\u0644\u06cc\u0627\u062a \u0644\u063a\u0648 \u0634\u062f.\",\n        reply_markup=ReplyKeyboardRemove(),\n    )\n</code></pre>"},{"location":"bot/bot_main/#src.bot.main.command_start","title":"<code>command_start(message, state)</code>  <code>async</code>","text":"<p>Triggered by /start command in Telegram</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The message sent by user</p> required <code>state</code> <code>FSMContext</code> <p>The state in which user is</p> required Source code in <code>src/bot/main.py</code> <pre><code>@form_router.message(CommandStart())\nasync def command_start(message: Message, state: FSMContext) -&gt; None:\n    \"\"\"Triggered by /start command in Telegram\n\n    Args:\n        message (Message): The message sent by user\n        state (FSMContext): The state in which user is\n    \"\"\"\n\n    await message.answer(\n        \"\u0633\u0644\u0627\u0645!\\n\"\n        \"\u0628\u0647 \u06cc\u0648\u0646\u06cc\u0641 \u062e\u0648\u0634 \u0627\u0648\u0645\u062f\u06cc\u0646. \u0628\u0631\u0627\u06cc \u0648\u0631\u0648\u062f \u0628\u0647 \u062d\u0633\u0627\u0628\u062a\u0648\u0646 \u062f\u0633\u062a\u0648\u0631\"\n        \" /login \"\n        \"\u0631\u0648 \u0628\u0632\u0646\u06cc\u062f.\",\n        reply_markup=ReplyKeyboardRemove(),\n    )\n</code></pre>"},{"location":"bot/bot_main/#src.bot.main.get_chat_id","title":"<code>get_chat_id(message)</code>  <code>async</code>","text":"<p>Get the current chat ID</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The message sent by user</p> required Source code in <code>src/bot/main.py</code> <pre><code>@form_router.message(Command(\"chat_id\"))\nasync def get_chat_id(message: Message) -&gt; None:\n    \"\"\"Get the current chat ID\n\n    Args:\n        message (Message): The message sent by user\n    \"\"\"\n    chat_id = message.chat.id\n    await message.answer(\n        f\"\u0622\u06cc\u062f\u06cc \u0686\u062a \u0634\u0645\u0627:\\n&lt;code&gt;{chat_id}&lt;/code&gt;\",\n        parse_mode=ParseMode.HTML\n    )\n</code></pre>"},{"location":"bot/bot_main/#src.bot.main.main","title":"<code>main()</code>  <code>async</code>","text":"<p>Run the bot with the form_router included</p> Source code in <code>src/bot/main.py</code> <pre><code>async def main():\n    \"\"\"Run the bot with the form_router included\"\"\"\n\n    bot = Bot(\n        token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)\n    )\n    dp = Dispatcher()\n    dp.include_router(form_router)\n    await set_commands(bot)\n    await dp.start_polling(bot)\n</code></pre>"},{"location":"bot/bot_main/#src.bot.main.process_lms_password","title":"<code>process_lms_password(message, state)</code>  <code>async</code>","text":"<p>Save LMS Password and start the process</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The message containing LMS Password</p> required <code>state</code> <code>FSMContext</code> <p>The state in which the user is</p> required Source code in <code>src/bot/main.py</code> <pre><code>@transaction.atomic\n@form_router.message(Form.lms_password)\nasync def process_lms_password(message: Message, state: FSMContext) -&gt; None:\n    \"\"\"Save LMS Password and start the process\n\n    Args:\n        message (Message): The message containing LMS Password\n        state (FSMContext): The state in which the user is\n    \"\"\"\n\n    password = message.text\n    data = await state.get_data()\n    username = data.get(\"lms_username\")\n    lms_user, created = await LMSUser.objects.aget_or_create(\n        username=username, password=password\n    )\n    if not created:\n        await message.answer(\n            f\"\u06a9\u0627\u0631\u0628\u0631 {username} \u0642\u0628\u0644\u0627 \u062f\u0631 \u0633\u06cc\u0633\u062a\u0645 \u062b\u0628\u062a \u0646\u0627\u0645 \u0634\u062f\u0647 \u0627\u0633\u062a.\",\n            reply_markup=ReplyKeyboardRemove(),\n        )\n        await state.clear()\n        return\n\n    # get_login\n    cookie = await get_cookie(user=lms_user)\n    if not cookie.cookie:\n        await message.answer(\n            f\"\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc {username} \u0646\u0627\u0645\u0648\u0641\u0642 \u0628\u0648\u062f.\",\n            reply_markup=ReplyKeyboardRemove(),\n        )\n        await lms_user.adelete()\n        await state.clear()\n        return\n\n    await ChatID.objects.aupdate_or_create(\n        user=lms_user,\n        defaults={\n            \"chat_id\": message.chat.id,\n        },\n    )\n    await sync_to_async(\n        lambda: transaction.on_commit(\n            chain(\n                update_user_courses_task.si(user_id=lms_user.pk),\n                check_new_messages_task.si(\n                    user_id=lms_user.pk, is_first_time=True\n                ),\n                send_welcome_message_task.s(chat_id=message.chat.id),\n            ).delay\n        )\n    )()\n\n    await schedule_periodic_tasks(user_id=lms_user.pk)\n\n    await state.clear()\n</code></pre>"},{"location":"bot/bot_main/#src.bot.main.process_lms_username","title":"<code>process_lms_username(message, state)</code>  <code>async</code>","text":"<p>Save LMS Username</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The message containing LMS Username</p> required <code>state</code> <code>FSMContext</code> <p>The state in which the user is</p> required Source code in <code>src/bot/main.py</code> <pre><code>@form_router.message(Form.lms_username)\nasync def process_lms_username(message: Message, state: FSMContext) -&gt; None:\n    \"\"\"Save LMS Username\n\n    Args:\n        message (Message): The message containing LMS Username\n        state (FSMContext): The state in which the user is\n    \"\"\"\n\n    username = message.text\n    await state.update_data(lms_username=username)\n    await state.set_state(Form.lms_password)\n    await message.answer(\"\u0644\u0637\u0641\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 LMS \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f:\")\n</code></pre>"},{"location":"bot/bot_main/#src.bot.main.process_login_command","title":"<code>process_login_command(message, state)</code>  <code>async</code>","text":"<p>Receive LMS Username</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The login command (/login)</p> required <code>state</code> <code>FSMContext</code> <p>The state in which the user is</p> required Source code in <code>src/bot/main.py</code> <pre><code>@form_router.message(Command(\"login\"))\nasync def process_login_command(message: Message, state: FSMContext) -&gt; None:\n    \"\"\"Receive LMS Username\n\n    Args:\n        message (Message): The login command (/login)\n        state (FSMContext): The state in which the user is\n    \"\"\"\n\n    await state.set_state(Form.lms_username)\n    await message.answer(\"\u0644\u0637\u0641\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc LMS \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f:\")\n</code></pre>"},{"location":"bot/bot_main/#src.bot.main.set_commands","title":"<code>set_commands(bot)</code>  <code>async</code>","text":"<p>Set bot commands to show in the menu</p> Source code in <code>src/bot/main.py</code> <pre><code>async def set_commands(bot: Bot):\n    \"\"\"Set bot commands to show in the menu\"\"\"\n    commands = [\n        BotCommand(command=\"start\", description=\"\u0634\u0631\u0648\u0639 \u06a9\u0627\u0631 \u0628\u0627 \u0631\u0628\u0627\u062a\"),\n        BotCommand(command=\"chat_id\", description=\"\u062f\u0631\u06cc\u0627\u0641\u062a \u0622\u06cc\u062f\u06cc \u0686\u062a \u0641\u0639\u0644\u06cc\"),\n        BotCommand(command=\"login\", description=\"\u0648\u0631\u0648\u062f \u0628\u0647 \u0633\u0627\u0645\u0627\u0646\u0647 LMS\"),\n        BotCommand(command=\"cancel\", description=\"\u0644\u063a\u0648 \u0639\u0645\u0644\u06cc\u0627\u062a \u0641\u0639\u0644\u06cc\")\n        # Add other commands as needed\n    ]\n    await bot.set_my_commands(commands)\n</code></pre>"},{"location":"bot/bot_services/","title":"bot.services","text":""},{"location":"bot/bot_services/#src.bot.services.send_notifications_service","title":"<code>send_notifications_service(chat_id, lms_msg_id)</code>  <code>async</code>","text":"<p>Send a previously saved message to a certain chat id</p> <p>Parameters:</p> Name Type Description Default <code>chat_id</code> <code>int</code> <p>A Telegram chat id</p> required <code>lms_msg_id</code> <code>int</code> <p>The id of the message in database</p> required Source code in <code>src/bot/services.py</code> <pre><code>async def send_notifications_service(chat_id: int, lms_msg_id: int) -&gt; None:\n    \"\"\"Send a previously saved message to a certain chat id\n\n    Args:\n        chat_id (int): A Telegram chat id\n        lms_msg_id (int): The id of the message in database\n    \"\"\"\n\n    lms_msg = await PublicMessage.objects.aget(id=lms_msg_id)\n    BOT_TOKEN = os.environ.get(\"BOT_TOKEN\")\n    html_message = await public_message_to_html(message=lms_msg)\n    async with aiohttp.ClientSession() as session:\n        async with session.post(\n            f\"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage\",\n            json={\n                \"chat_id\": chat_id,\n                \"text\": html_message,\n                \"parse_mode\": ParseMode.HTML,\n            },\n        ) as response:\n            if response.status == 200:\n                lms_msg.is_sent = True\n                await lms_msg.asave()\n            else:\n                # Delete it, to be fetched again\n                await lms_msg.adelete()\n</code></pre>"},{"location":"bot/bot_services/#src.bot.services.send_welcome_message_service","title":"<code>send_welcome_message_service(msg_count, chat_id)</code>  <code>async</code>","text":"<p>Send a welcome message to a certain chat id</p> <p>Parameters:</p> Name Type Description Default <code>msg_count</code> <code>int</code> <p>The number of scraped messages</p> required <code>chat_id</code> <code>int</code> <p>A Telegram chat id</p> required Source code in <code>src/bot/services.py</code> <pre><code>async def send_welcome_message_service(msg_count: int, chat_id: int) -&gt; None:\n    \"\"\"Send a welcome message to a certain chat id\n\n    Args:\n        msg_count (int): The number of scraped messages\n        chat_id (int): A Telegram chat id\n    \"\"\"\n\n    BOT_TOKEN = os.environ.get(\"BOT_TOKEN\")\n    async with aiohttp.ClientSession() as session:\n        await session.post(\n            f\"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage\",\n            data={\n                \"chat_id\": chat_id,\n                \"text\": f\"\u062a\u0639\u062f\u0627\u062f {msg_count} \u067e\u06cc\u0627\u0645 \u067e\u0631\u062f\u0627\u0632\u0634 \u0648 \u0627\u0639\u0644\u0627\u0646\u200c\u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u0627\u0647\u0646\u062f \u0634\u062f\",\n                \"parse_mode\": ParseMode.HTML,\n            },\n        )\n</code></pre>"},{"location":"common/common_services_cookie/","title":"common.services.cookie","text":""},{"location":"common/common_services_cookie/#src.common.services.cookie.get_cookie","title":"<code>get_cookie(user)</code>  <code>async</code>","text":"<p>Find cookie in database. if not found or invalid, logins to get a new cookie str and stores it in the database.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>LMSUser</code> <p>LMS User instance</p> required <p>Returns:</p> Type Description <code>LMSCookie</code> <p>An LMSCookie</p> Source code in <code>src/common/services/cookie.py</code> <pre><code>async def get_cookie(user: LMSUser) -&gt; LMSCookie:\n    \"\"\"Find cookie in database. if not found or invalid,\n    logins to get a new cookie str and stores it in the database.\n\n    Args:\n        user (LMSUser): LMS User instance\n\n    Returns:\n        (LMSCookie): An LMSCookie\n    \"\"\"\n\n    cookie_value = await LMSCookie.objects.filter(user=user).afirst()\n    cookie_value = cookie_value.cookie if cookie_value else \"\"\n    cookie = LMSCookie(user=user, cookie=cookie_value)\n    is_valid = await is_cookie_valid(cookie=cookie)\n    if is_valid:\n        return cookie\n    cookie = await login(user=user)\n    await LMSCookie.objects.aupdate_or_create(\n        user=user,\n        defaults={\"cookie\": cookie.cookie},\n    )\n    return cookie\n</code></pre>"},{"location":"common/common_services_cookie/#src.common.services.cookie.is_cookie_valid","title":"<code>is_cookie_valid(cookie)</code>  <code>async</code>","text":"<p>Send request to /members/home to see if cookie has expired. If response is 302, request is being redirected to the login page. So, the cookie was expired (or invalid). If not, it's reached /members/home.</p> <p>Parameters:</p> Name Type Description Default <code>cookie</code> <code>LMSCookie</code> <p>An LMSCookie</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if we're not redirected to another page (login),</p> <code>bool</code> <p>False if redirected.</p> Source code in <code>src/common/services/cookie.py</code> <pre><code>async def is_cookie_valid(cookie: LMSCookie) -&gt; bool:\n    \"\"\"Send request to /members/home to see if cookie has expired.\n    If response is 302, request is being redirected to the login page.\n    So, the cookie was expired (or invalid). If not, it's reached /members/home.\n\n    Args:\n        cookie (LMSCookie): An LMSCookie\n\n    Returns:\n        (bool): True if we're not redirected to another page (login),\n        False if redirected.\n    \"\"\"\n\n    BASE_URL = constants.BASE_URL\n    HOME_SUFFIX_URL = constants.HOME_SUFFIX_URL\n\n    async with aiohttp.ClientSession(\n        base_url=BASE_URL, cookies=cookie.as_dict\n    ) as session:\n        async with session.get(\n            url=HOME_SUFFIX_URL, allow_redirects=False\n        ) as response:\n            if response.status == 302:\n                return False\n            return True\n</code></pre>"},{"location":"common/common_services_cookie/#src.common.services.cookie.login","title":"<code>login(user)</code>  <code>async</code>","text":"<p>Login to LMS. <code>BASE_URL</code> and <code>LOGIN_SUFFIX_URL</code> are taken from constants.py. If status is 302, request is being redirected to the home page, so the login is successful. If not, session is still at the login page, so it was not successful.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>LMSUser</code> <p>LMSUser instance</p> required <p>Returns:</p> Type Description <code>LMSCookie</code> <p>An LMSCookie</p> Source code in <code>src/common/services/cookie.py</code> <pre><code>async def login(user: LMSUser) -&gt; LMSCookie:\n    \"\"\"Login to LMS. `BASE_URL` and `LOGIN_SUFFIX_URL` are taken from\n    constants.py. If status is 302, request is being redirected\n    to the home page, so the login is successful. If not, session\n    is still at the login page, so it was not successful.\n\n    Args:\n        user (LMSUser): LMSUser instance\n\n    Returns:\n        (LMSCookie): An LMSCookie\n    \"\"\"\n\n    BASE_URL = constants.BASE_URL\n    LOGIN_SUFFIX_URL = constants.LOGIN_SUFFIX_URL\n    json_body = {\"username\": user.username, \"password\": user.decoded_password}\n\n    async with aiohttp.ClientSession(base_url=BASE_URL) as session:\n        async with session.post(\n            url=LOGIN_SUFFIX_URL, data=json_body, allow_redirects=False\n        ) as response:\n            if response.status == 302 and response.cookies.get(\n                constants.COOKIE_KEY_NAME, False\n            ):\n                return LMSCookie(\n                    cookie=response.cookies[constants.COOKIE_KEY_NAME].value\n                )\n            return LMSCookie(cookie=\"\")\n</code></pre>"},{"location":"lms_public/lms_public_schedule_tasks/","title":"lms_public.schedule_tasks","text":""},{"location":"lms_public/lms_public_schedule_tasks/#src.lms_public.schedule_tasks.schedule_periodic_tasks","title":"<code>schedule_periodic_tasks(user_id)</code>  <code>async</code>","text":"<p>Schedule 2 periodic tasks: 1. Update courses every Thursday at midnight 2. Check messages every 5 minutes</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The id of the LMSUser instance</p> required Source code in <code>src/lms_public/schedule_tasks.py</code> <pre><code>async def schedule_periodic_tasks(user_id: int):\n    \"\"\"Schedule 2 periodic tasks:\n    1. Update courses every Thursday at midnight\n    2. Check messages every 5 minutes\n\n    Args:\n        user_id (int): The id of the LMSUser instance\n    \"\"\"\n\n    # Task 1: Every Thursday at midnight\n    thursday_schedule, _ = await CrontabSchedule.objects.aget_or_create(\n        minute=\"0\",\n        hour=\"0\",\n        day_of_week=\"4\",  # Thursday\n        day_of_month=\"*\",\n        month_of_year=\"*\",\n    )\n    await PeriodicTask.objects.aupdate_or_create(\n        name=f\"Update courses for user {user_id}\",\n        task=\"lms_public.tasks.update_user_courses_task\",\n        defaults={\n            \"crontab\": thursday_schedule,\n            \"args\": json.dumps([user_id]),\n        },\n    )\n\n    # Task 2: Every 5 minutes (or user-defined interval)\n    user_pref, _ = await UserNotificationPreference.objects.aget_or_create(\n        user_id=user_id,\n        defaults={\"public_lms_interval_minutes\": 5},\n    )\n    interval_schedule, _ = await IntervalSchedule.objects.aget_or_create(\n        every=user_pref.public_lms_interval_minutes,\n        period=IntervalSchedule.MINUTES,\n    )\n    await PeriodicTask.objects.aupdate_or_create(\n        name=f\"Check messages for user {user_id}\",\n        task=\"lms_public.tasks.check_new_messages_task\",\n        defaults={\n            \"interval\": interval_schedule,\n            \"args\": json.dumps([user_id]),\n        },\n    )\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/","title":"lms_public.services.change_handler","text":""},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.add_message_header_footer","title":"<code>add_message_header_footer(new_message, old_message)</code>","text":"<p>Add appropriate header and footer to message based on changes</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def add_message_header_footer(\n    new_message: PublicMessage, old_message: PublicMessage | None\n) -&gt; None:\n    \"\"\"Add appropriate header and footer to message based on changes\"\"\"\n    has_major_change = False\n    if not old_message:\n        # The major change is being a new message\n        has_major_change = True\n        return has_major_change\n\n    changes = is_x_changed(old_message, new_message)\n    minor_changes: list[str] = list()\n\n    if changes[\"is_exercise_changed\"]:\n        on_is_exercise(new_message, old_message)\n        has_major_change = True\n        return has_major_change\n\n    if changes[\"is_exercise_finished_changed\"]:\n        on_is_exercise_finished(new_message, old_message)\n        has_major_change = True\n\n    if (\n        changes[\"is_exercise_deadline_changed\"]\n        and not changes[\"is_exercise_finished_changed\"]\n    ):\n        on_exercise_deadline(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_has_attachment_changed\"]:\n        on_has_attachment(\n            new_message, old_message, has_major_change, minor_changes\n        )\n        has_major_change = True\n    elif (\n        changes[\"is_attachment_link_changed\"]\n        and changes[\"is_attachment_name_changed\"]\n    ):\n        on_attachment_link_and_text(\n            new_message, has_major_change, minor_changes\n        )\n        has_major_change = True\n    elif changes[\"is_attachment_link_changed\"]:\n        on_attachment_link(new_message, has_major_change, minor_changes)\n        has_major_change = True\n    elif changes[\"is_attachment_name_changed\"]:\n        on_attachment_name(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_exercise_name_changed\"]:\n        on_exercise_name(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_exercise_start_changed\"]:\n        on_exercise_start(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_online_session_changed\"]:\n        on_is_online_session(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_online_session_name_changed\"]:\n        on_online_session_name(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_online_session_link_changed\"]:\n        on_online_session_link(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_online_session_status_changed\"]:\n        on_online_session_status(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_online_session_start_changed\"]:\n        on_online_session_start(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if changes[\"is_online_session_end_changed\"]:\n        on_online_session_end(new_message, has_major_change, minor_changes)\n        has_major_change = True\n\n    if minor_changes:\n        footer_items = (\n            \"\\n- \".join(minor_changes)\n            if isinstance(minor_changes, list)\n            else minor_changes\n        )\n        new_message.footer = footer_items\n\n    return has_major_change\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.has_message_changed","title":"<code>has_message_changed(new_message, old_message)</code>","text":"<p>Determine if message has changed</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def has_message_changed(\n    new_message: PublicMessage, old_message: PublicMessage | None\n) -&gt; bool:\n    \"\"\"Determine if message has changed\"\"\"\n    if not old_message:\n        return True\n\n    changes = is_x_changed(old_message, new_message)\n    return any(changes.values())\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.is_x_changed","title":"<code>is_x_changed(old_message, new_message)</code>","text":"<p>Check which properties have changed between messages</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def is_x_changed(\n    old_message: PublicMessage, new_message: PublicMessage\n) -&gt; dict[str, bool]:\n    \"\"\"Check which properties have changed between messages\"\"\"\n    return {\n        \"is_exercise_changed\": old_message.is_exercise\n        != new_message.is_exercise,\n        \"is_exercise_finished_changed\": old_message.is_exercise_finished\n        != new_message.is_exercise_finished,\n        \"is_exercise_deadline_changed\": old_message.exercise_deadline\n        != new_message.exercise_deadline,\n        \"is_has_attachment_changed\": old_message.has_attachment\n        != new_message.has_attachment,\n        \"is_attachment_link_changed\": old_message.attachment_link\n        != new_message.attachment_link,\n        \"is_attachment_name_changed\": old_message.attachment_name\n        != new_message.attachment_name,\n        \"is_exercise_name_changed\": old_message.exercise_name\n        != new_message.exercise_name,\n        \"is_exercise_start_changed\": old_message.exercise_start\n        != new_message.exercise_start,\n        \"is_online_session_changed\": old_message.is_online_session\n        != new_message.is_online_session,\n        \"is_online_session_name_changed\": old_message.online_session_name\n        != new_message.online_session_name,\n        \"is_online_session_link_changed\": old_message.online_session_link\n        != new_message.online_session_link,\n        \"is_online_session_status_changed\": old_message.online_session_status\n        != new_message.online_session_status,\n        \"is_online_session_start_changed\": old_message.online_session_start\n        != new_message.online_session_start,\n        \"is_online_session_end_changed\": old_message.online_session_end\n        != new_message.online_session_end,\n    }\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_attachment_link","title":"<code>on_attachment_link(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle attachment link change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_attachment_link(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle attachment link change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0644\u06cc\u0646\u06a9 \u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a\")\n    else:\n        new_message.header = \"\u0644\u06cc\u0646\u06a9 \u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_attachment_link_and_text","title":"<code>on_attachment_link_and_text(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle attachment link and text change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_attachment_link_and_text(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle attachment link and text change\"\"\"\n    attachment_name = (\n        f\"\u0628\u0647 \u0646\u0627\u0645 {new_message.attachment_name}\"\n        if new_message.attachment_name\n        else \"\"\n    )\n    if has_major_change:\n        minor_changes.append(\"\u0622\u067e\u0644\u0648\u062f \u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a \u062c\u062f\u06cc\u062f\")\n    else:\n        new_message.header = f\"\u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a \u062c\u062f\u06cc\u062f\u06cc {attachment_name} \u0622\u067e\u0644\u0648\u062f \u0634\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_attachment_name","title":"<code>on_attachment_name(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle attachment name change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_attachment_name(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle attachment name change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0646\u0627\u0645 \u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a\")\n    else:\n        new_message.header = \"\u0646\u0627\u0645 \u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_exercise_deadline","title":"<code>on_exercise_deadline(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle exercise deadline change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_exercise_deadline(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle exercise deadline change\"\"\"\n    exercise_name = (\n        new_message.exercise_name if new_message.exercise_name else \"\"\n    )\n    alert_if_still_finished = (\n        \"\u0627\u0645\u0627 \u0645\u0647\u0644\u062a \u0647\u0645\u0686\u0646\u0627\u0646 \u062a\u0645\u0627\u0645 \u0634\u062f\u0647 \u0627\u0633\u062a.\"\n        if new_message.is_exercise_finished\n        else \"\"\n    )\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0645\u0647\u0644\u062a \u0627\u0631\u0633\u0627\u0644 \u062a\u0645\u062f\u06cc\u062f\")\n    else:\n        new_message.header = (\n            f\"\u0645\u0647\u0644\u062a \u0627\u0631\u0633\u0627\u0644 \u062a\u0645\u0631\u06cc\u0646 {exercise_name} \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f. \"\n            f\"{alert_if_still_finished}\"\n        )\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_exercise_name","title":"<code>on_exercise_name(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle exercise name change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_exercise_name(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle exercise name change\"\"\"\n    name_and_action = (\n        f\"\u0628\u0647 {new_message.exercise_name} \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n        if new_message.exercise_name\n        else \"\u062d\u0630\u0641 \u0634\u062f.\"\n    )\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0646\u0627\u0645 \u062a\u0645\u0631\u06cc\u0646\")\n    else:\n        new_message.header = f\"\u0646\u0627\u0645 \u062a\u0645\u0631\u06cc\u0646 {name_and_action}\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_exercise_start","title":"<code>on_exercise_start(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle exercise start time change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_exercise_start(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle exercise start time change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 \u062a\u0645\u0631\u06cc\u0646\")\n    else:\n        new_message.header = (\n            f\"\u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 \u062a\u0645\u0631\u06cc\u0646 \u0631\u0627 \u0628\u0647 {new_message.exercise_start} \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n        )\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_has_attachment","title":"<code>on_has_attachment(new_message, old_message, has_major_change, minor_changes)</code>","text":"<p>Handle attachment status change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_has_attachment(\n    new_message: PublicMessage,\n    old_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle attachment status change\"\"\"\n    minor_action = \"\u0627\u0641\u0632\u0648\u062f\u0646\" if new_message.has_attachment else \"\u062d\u0630\u0641\"\n    major_action = \"\u0627\u0636\u0627\u0641\u0647 \u0634\u062f.\" if new_message.has_attachment else \"\u062d\u0630\u0641 \u0634\u062f.\"\n    message = new_message if new_message.has_attachment else old_message\n    attachment_name = (\n        message.attachment_name if message.attachment_name else \"\"\n    )\n\n    if has_major_change:\n        minor_changes.append(f\"{minor_action} \u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a\")\n    else:\n        new_message.header = f\"\u0641\u0627\u06cc\u0644 \u067e\u06cc\u0648\u0633\u062a {attachment_name} {major_action}\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_is_exercise","title":"<code>on_is_exercise(new_message, old_message)</code>","text":"<p>Handle exercise status change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_is_exercise(\n    new_message: PublicMessage, old_message: PublicMessage\n) -&gt; None:\n    \"\"\"Handle exercise status change\"\"\"\n    message = new_message if new_message.is_exercise else old_message\n    exercise_name = message.exercise_name if message.exercise_name else \"\"\n    action = \"\u0627\u0636\u0627\u0641\u0647 \u0634\u062f.\" if new_message.is_exercise else \"\u062d\u0630\u0641 \u0634\u062f.\"\n    new_message.header = f\"\u062a\u0645\u0631\u06cc\u0646 {exercise_name} {action}\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_is_exercise_finished","title":"<code>on_is_exercise_finished(new_message, old_message)</code>","text":"<p>Handle exercise completion status change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_is_exercise_finished(\n    new_message: PublicMessage, old_message: PublicMessage\n) -&gt; None:\n    \"\"\"Handle exercise completion status change\"\"\"\n    exercise_name = (\n        new_message.exercise_name if new_message.exercise_name else \"\"\n    )\n    action = (\n        \"\u0628\u0647 \u067e\u0627\u06cc\u0627\u0646 \u0631\u0633\u06cc\u062f.\" if new_message.is_exercise_finished else \"\u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n    )\n    new_message.header = f\"\u0645\u0647\u0644\u062a \u0627\u0631\u0633\u0627\u0644 \u062a\u0645\u0631\u06cc\u0646 {exercise_name} {action}\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_is_online_session","title":"<code>on_is_online_session(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle online session status change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_is_online_session(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle online session status change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u0627\u06cc\u062c\u0627\u062f \u06cc\u06a9 \u062c\u0644\u0633\u0647\u200c\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646\")\n    else:\n        new_message.header = \"\u06cc\u06a9 \u062c\u0644\u0633\u0647\u200c\u06cc \u0622\u0646\u0644\u0627\u06cc\u0646 \u062c\u062f\u06cc\u062f \u0627\u06cc\u062c\u0627\u062f \u0634\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_online_session_end","title":"<code>on_online_session_end(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle online session end time change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_online_session_end(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle online session end time change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0632\u0645\u0627\u0646 \u067e\u0627\u06cc\u0627\u0646 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646\")\n    else:\n        new_message.header = f\"\u0632\u0645\u0627\u0646 \u067e\u0627\u06cc\u0627\u0646 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0647 {new_message.online_session_end} \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_online_session_link","title":"<code>on_online_session_link(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle online session link change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_online_session_link(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle online session link change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0644\u06cc\u0646\u06a9 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646\")\n    else:\n        new_message.header = \"\u0644\u06cc\u0646\u06a9 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646 \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_online_session_name","title":"<code>on_online_session_name(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle online session name change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_online_session_name(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle online session name change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0646\u0627\u0645 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646\")\n    else:\n        new_message.header = (\n            f\"\u0646\u0627\u0645 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0647 {new_message.online_session_name} \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n        )\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_online_session_start","title":"<code>on_online_session_start(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle online session start time change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_online_session_start(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle online session start time change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646\")\n    else:\n        new_message.header = f\"\u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0647 {new_message.online_session_start} \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.on_online_session_status","title":"<code>on_online_session_status(new_message, has_major_change, minor_changes)</code>","text":"<p>Handle online session status change</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>def on_online_session_status(\n    new_message: PublicMessage,\n    has_major_change: bool,\n    minor_changes: list[str],\n) -&gt; None:\n    \"\"\"Handle online session status change\"\"\"\n    if has_major_change:\n        minor_changes.append(\"\u062a\u063a\u06cc\u06cc\u0631 \u0648\u0636\u0639\u06cc\u062a \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646\")\n    else:\n        new_message.header = f\"\u0648\u0636\u0639\u06cc\u062a \u062c\u0644\u0633\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0647 {new_message.online_session_status} \u062a\u063a\u06cc\u06cc\u0631 \u06a9\u0631\u062f.\"\n</code></pre>"},{"location":"lms_public/lms_public_services_change_handler/#src.lms_public.services.change_handler.public_message_to_html","title":"<code>public_message_to_html(message)</code>  <code>async</code>","text":"<p>Converts a PublicMessage object to HTML representation.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>PublicMessage</code> <p>PublicMessage object to convert</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>HTML representation of the message</p> Source code in <code>src/lms_public/services/change_handler.py</code> <pre><code>async def public_message_to_html(message: PublicMessage) -&gt; str:\n    \"\"\"\n    Converts a PublicMessage object to HTML representation.\n\n    Args:\n        message: PublicMessage object to convert\n\n    Returns:\n        str: HTML representation of the message\n    \"\"\"\n    course_name = await sync_to_async(lambda: message.lms_course.name)()\n    course_name = f\"\ud83d\udcda  {course_name}\"\n\n    author = f\"\\n\\n\ud83d\udc64  {message.author}\"\n    header = f\"\\n\\n\u25ab\ufe0f&lt;b&gt;{message.header}&lt;/b&gt;\" if message.header else \"\"\n\n    # Assuming 'text' field exists in PublicMessage but wasn't shown in the provided code\n    text = (\n        f\"\\n\\n\u270d\ud83c\udffb  {message.text}\"\n        if hasattr(message, \"text\") and message.text\n        else \"\"\n    )\n\n    footer = \"\"\n    if hasattr(message, \"footer\") and message.footer:\n        footer = f\"\\n\\n\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062c\u0632\u0626\u06cc: \\n{message.footer}\"\n\n    exercise_description = \"\"\n    if message.is_exercise:\n        exercise_description = (\n            f\"\\n\\n\u0646\u0627\u0645 \u062a\u0645\u0631\u06cc\u0646: {message.exercise_name}\\n\"\n            f\"\u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639: {message.exercise_start}\\n\"\n            f\"\u0645\u0647\u0644\u062a \u0627\u0631\u0633\u0627\u0644: {message.exercise_deadline}\"\n        )\n        if message.is_exercise_finished:\n            exercise_description += \"(\u067e\u0627\u06cc\u0627\u0646 \u06cc\u0627\u0641\u062a\u0647) \"\n\n    attachment_description = \"\"\n    if message.has_attachment:\n        attachment_description = f'\\n\\n\u0641\u0627\u06cc\u0644: &lt;a href=\"{constants.BASE_URL + message.attachment_link}\"&gt;{message.attachment_name}&lt;/a&gt;'\n\n    online_session_description = \"\"\n    if message.is_online_session:\n        online_session_status_icon = \"\u23f3\"\n        if \"\u062f\u0631 \u062d\u0627\u0644\" in message.online_session_status:\n            online_session_status_icon = \"\ud83d\udfe2\"\n        elif \"\u0636\u0628\u0637\" in message.online_session_status:\n            online_session_status_icon = \"\ud83d\udd34\"\n        online_session_description = (\n            f'\\n\\n\ud83c\udf10 \u0639\u0646\u0648\u0627\u0646 \u062c\u0644\u0633\u0647: &lt;a href=\"{constants.BASE_URL + message.online_session_link}\"&gt;{message.online_session_name}&lt;/a&gt;'\n            f\"\\n{online_session_status_icon} \u0648\u0636\u0639\u06cc\u062a: {message.online_session_status}\"\n            f\"\\n\ud83d\ude80 \u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639: {message.online_session_start}\"\n            f\"\\n\ud83c\udfc1 \u0632\u0645\u0627\u0646 \u067e\u0627\u06cc\u0627\u0646: {message.online_session_end}\"\n        )\n    # Assuming 'sentAt' field exists in PublicMessage but wasn't shown in the provided code\n    date = (\n        f\"\\n\\n\ud83d\udd51  {message.sent_at}\"\n        if hasattr(message, \"sent_at\") and message.sent_at\n        else \"\"\n    )\n\n    white_space = \"\u200c\"  # Zero-width non-joiner character\n\n    message_html = (\n        f\"{course_name}\"\n        f\"{author}\"\n        f\"{header}\"\n        f\"{text}\"\n        f\"{footer}\"\n        f\"{exercise_description}\"\n        f\"{attachment_description}\"\n        f\"{online_session_description}\"\n        f\"{date}\"\n        f\"{white_space}\\n\"\n    )\n\n    return message_html\n</code></pre>"},{"location":"lms_public/lms_public_services_parsers/","title":"lms_public.services.parsers","text":""},{"location":"lms_public/lms_public_services_parsers/#src.lms_public.services.parsers.parse_public_message","title":"<code>parse_public_message(message_container, course)</code>","text":"<p>Parse a message li element and extract all relevant information.</p> <p>Parameters:</p> Name Type Description Default <code>message_container</code> <code>BeautifulSoup</code> <p>BeautifulSoup element representing the message</p> required <code>course</code> <code>LMSCourse</code> <p>An LMSCourse instance</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Dictionary containing message details</p> Source code in <code>src/lms_public/services/parsers.py</code> <pre><code>def parse_public_message(\n    message_container: BeautifulSoup, course: str\n) -&gt; PublicMessage:\n    \"\"\"Parse a message li element and extract all relevant information.\n\n    Args:\n        message_container (BeautifulSoup): BeautifulSoup element representing the message\n        course (LMSCourse): An LMSCourse instance\n\n    Returns:\n        (dict): Dictionary containing message details\n    \"\"\"\n    # Initialize message data\n    message = {\n        \"item_id\": \"\",\n        \"lms_course\": course,\n        \"author\": \"\",\n        \"text\": \"\",\n        \"sent_at\": \"\",\n        \"has_attachment\": False,\n        \"attachment_name\": \"\",\n        \"attachment_link\": \"\",\n        \"is_exercise\": False,\n        \"is_exercise_finished\": False,\n        \"exercise_name\": \"\",\n        \"exercise_start\": \"\",\n        \"exercise_deadline\": \"\",\n        \"is_online_session\": False,\n        \"online_session_name\": \"\",\n        \"online_session_link\": \"\",\n        \"online_session_status\": \"\",\n        \"online_session_start\": \"\",\n        \"online_session_end\": \"\",\n    }\n\n    # Extract item id\n    # find the id of the message container\n    message[\"item_id\"] = message_container.get(\"id\")\n\n    # Extract author\n    author_element = message_container.select_one(\n        'a[class~=\"feed_item_username\"]'\n    )\n    if author_element:\n        # this converts \"Fakheran - Ali\" to \"Ali Fakheran\"\n        message[\"author\"] = \" \".join(\n            reversed(author_element.text.strip().split(\" - \"))\n        )\n\n    # Extract text body\n    text_body = message_container.select_one(\n        'span[class=\"feed_item_bodytext\"]'\n    )\n    if text_body:\n        # Check for expanded text content\n        text_span = text_body.select_one(\n            'span[class=\"view_more\"][style^=\"display\"]'\n        )\n        text_element = (\n            text_span if text_span and text_span.text.strip() else text_body\n        )\n        message[\"text\"] = text_element.text.strip()\n\n    # Extract timestamp\n    timestamp_element = message_container.select_one('span[class=\"timestamp\"]')\n    if timestamp_element:\n        message[\"sent_at\"] = timestamp_element.text.strip()\n\n    # Check for attachments\n    attachment_div = message_container.select_one(\n        'div[class=\"feed_item_attachments\"]'\n    )\n    if attachment_div:\n        online_session_table = attachment_div.find(\"table\")\n        if online_session_table:\n            message[\"is_online_session\"] = True\n            message[\"online_session_name\"] = online_session_table.find(\n                class_=\"adobe_meeting_url\"\n            ).text\n            message[\"online_session_link\"] = online_session_table.find(\n                class_=\"adobe_meeting_url\"\n            ).get(\"href\", \"\")\n            message[\"online_session_status\"] = (\n                online_session_table.find_all(\"tr\")[-1]\n                .find_all(\"td\")[2]\n                .find(\"span\")\n                .text\n            )\n            online_session_time = (\n                online_session_table.find_all(\"tr\")[-1]\n                .find_all(\"td\")[2]\n                .find(\"div\")\n                .text\n            )\n            start_part, end_part = online_session_time.split(\"\u0632\u0645\u0627\u0646 \u067e\u0627\u06cc\u0627\u0646 : \")\n            start_time = start_part.replace(\"\u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 : \", \"\").strip()\n            end_time = end_part.strip()\n            message[\"online_session_start\"] = start_time\n            message[\"online_session_end\"] = end_time\n\n        else:\n            attachment_spans = attachment_div.find_all(\"span\", recursive=False)\n            if len(attachment_spans) == 0:\n                # Regular attachment, not an exercise\n                message[\"has_attachment\"] = True\n                anchor_tag = attachment_div.find(\"a\")\n                if anchor_tag:\n                    message[\"attachment_name\"] = anchor_tag.text.strip()\n                    message[\"attachment_link\"] = anchor_tag.get(\"href\", \"\")\n\n            if len(attachment_spans) == 1:\n                # It's a link\n                link = (\n                    attachment_spans[0]\n                    .find(class_=\"feed_item_link_title\")\n                    .text.strip()\n                )\n                if link not in message[\"text\"]:\n                    message[\"text\"] += f\"\\n{link}\"\n\n            elif len(attachment_spans) == 4:\n                # It's an exercise\n                message[\"is_exercise\"] = True\n\n                # Extract exercise name\n                exercise_name = attachment_spans[0].text.strip()\n                # Remove \"title:\" prefix\n                colon_index = exercise_name.find(\":\")\n                if colon_index != -1:\n                    message[\"exercise_name\"] = exercise_name[\n                        colon_index + 1 :\n                    ].strip()\n\n                # Check for exercise attachment\n                if attachment_spans[1].find(\"a\"):\n                    anchor_tag = attachment_spans[1].find(\"a\")\n                    message[\"has_attachment\"] = True\n                    message[\"attachment_name\"] = anchor_tag.text.strip()\n                    message[\"attachment_link\"] = anchor_tag.get(\"href\", \"\")\n\n                # Extract exercise start time\n\n                exercise_start = attachment_spans[2].text.strip()\n                colon_index = exercise_start.find(\":\")\n                if colon_index != -1:\n                    message[\"exercise_start\"] = exercise_start[\n                        colon_index + 1 :\n                    ].strip()\n\n                # Extract exercise deadline\n                exercise_deadline = attachment_spans[3].text.strip()\n                colon_index = exercise_deadline.find(\":\")\n                if colon_index != -1:\n                    message[\"exercise_deadline\"] = exercise_deadline[\n                        colon_index + 1 :\n                    ].strip()\n                    if \"\u067e\u0627\u06cc\u0627\u0646\" in message[\"exercise_deadline\"]:\n                        message[\"is_exercise_finished\"] = True\n\n    return PublicMessage(**message)\n</code></pre>"},{"location":"lms_public/lms_public_services_scheduled_tasks/","title":"lms_public.services.scheduled_tasks","text":""},{"location":"lms_public/lms_public_services_scheduled_tasks/#src.lms_public.services.scheduled_tasks.check_new_messages_service","title":"<code>check_new_messages_service(user_id, is_first_time=False)</code>  <code>async</code>","text":"<p>Fetch new messages, compare them with the old ones, send notification for the new ones</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The id of the LMSUser instance</p> required <code>is_first_time</code> <code>bool</code> <p>If true, sends notification for every new message. If false, does not send any message. The return value then can be used to send a welcome message, containing the number of scraped messages. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of scraped messages</p> Source code in <code>src/lms_public/services/scheduled_tasks.py</code> <pre><code>async def check_new_messages_service(\n    user_id: int, is_first_time: bool = False\n) -&gt; int:\n    \"\"\"Fetch new messages, compare them with the old ones, send notification\n    for the new ones\n\n    Args:\n        user_id (int): The id of the LMSUser instance\n        is_first_time (bool, optional): If true, sends notification for every\n            new message. If false, does not send any message. The return value\n            then can be used to send a welcome message, containing the number of\n            scraped messages. Defaults to False.\n\n    Returns:\n        int: The number of scraped messages\n    \"\"\"\n\n    lms_user = await LMSUser.objects.aget(id=user_id)\n    cookie = await get_cookie(user=lms_user)\n    chat_id = await sync_to_async(lambda: lms_user.chat_id.chat_id)()\n    active_courses = await sync_to_async(list)(\n        LMSCourse.objects.filter(user=lms_user, is_active=True)\n    )\n    tasks = [\n        asyncio.create_task(get_course_messages(course=course, cookie=cookie))\n        for course in active_courses\n    ]\n    courses_messages = await asyncio.gather(*tasks)\n\n    msg_count = 0\n    for crs_messages in courses_messages:\n        for lms_msg in crs_messages:\n            db_msg = await PublicMessage.objects.filter(\n                user=lms_user,\n                item_id=lms_msg.item_id,\n                lms_course__suffix_url=lms_msg.lms_course.suffix_url,\n                author=lms_msg.author,\n                sent_at=lms_msg.sent_at,\n            ).alast()\n\n            if add_message_header_footer(\n                new_message=lms_msg, old_message=db_msg\n            ):\n                lms_msg.user = lms_user\n                await lms_msg.asave()\n                msg_count += 1\n                if is_first_time:\n                    continue\n                send_notifications_task.delay(\n                    chat_id=chat_id, lms_msg_id=lms_msg.pk\n                )\n    return msg_count\n</code></pre>"},{"location":"lms_public/lms_public_services_scheduled_tasks/#src.lms_public.services.scheduled_tasks.update_user_courses_service","title":"<code>update_user_courses_service(user_id)</code>  <code>async</code>","text":"<p>Fetch new LMS courses and mark them as active, deactivating older ones</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The id of the LMS User</p> required Source code in <code>src/lms_public/services/scheduled_tasks.py</code> <pre><code>async def update_user_courses_service(user_id: int) -&gt; None:\n    \"\"\"Fetch new LMS courses and mark them as active,\n    deactivating older ones\n\n    Args:\n        user_id (int): The id of the LMS User\n    \"\"\"\n\n    lms_user = await LMSUser.objects.aget(id=user_id)\n    cookie = await get_cookie(user=lms_user)\n    courses_info = await get_courses_suffix_urls(cookie=cookie)\n    all_suffix_urls = [info[0] for info in courses_info]\n\n    for crs_info in courses_info:\n        await LMSCourse.objects.aget_or_create(\n            user=lms_user,\n            suffix_url=crs_info[0],\n            defaults={\"name\": crs_info[1]},\n        )\n    # Deactivate old courses\n    await (\n        LMSCourse.objects.exclude(\n            suffix_url__in=all_suffix_urls,\n        )\n        .filter(user=lms_user)\n        .aupdate(is_active=False)\n    )\n</code></pre>"},{"location":"lms_public/lms_public_services_scrapers/","title":"lms_public.services.scrapers","text":""},{"location":"lms_public/lms_public_services_scrapers/#src.lms_public.services.scrapers.get_course_messages","title":"<code>get_course_messages(course, cookie)</code>  <code>async</code>","text":"<p>Get the course messages from LMS. Sends request to course page. Parses the text using bs4.</p> <p>Parameters:</p> Name Type Description Default <code>course</code> <code>LMSCourse</code> <p>An LMSCourser instance</p> required <code>cookie</code> <code>LMSCookie</code> <p>An LMSCookie instance</p> required <p>Returns:</p> Type Description <code>list[PublicMessage]</code> <p>List of course messages</p> Source code in <code>src/lms_public/services/scrapers.py</code> <pre><code>async def get_course_messages(\n    course: LMSCourse, cookie: LMSCookie\n) -&gt; list[PublicMessage]:\n    \"\"\"Get the course messages from LMS. Sends request to course page.\n    Parses the text using bs4.\n\n    Args:\n        course (LMSCourse): An LMSCourser instance\n        cookie (LMSCookie): An LMSCookie instance\n\n    Returns:\n        (list[PublicMessage]): List of course messages\n    \"\"\"\n    page_text = await get_page_text(\n        suffix_url=course.suffix_url, cookie=cookie\n    )\n\n    # Begin scrape\n    soup = BeautifulSoup(page_text, \"html.parser\")\n    message_containers = soup.find_all(class_=\"wall-action-item\")\n    parsed_messages = list()\n    for msg_container in message_containers:\n        parsed_messages.append(\n            parse_public_message(\n                message_container=msg_container,\n                course=course,\n            )\n        )\n    return parsed_messages\n</code></pre>"},{"location":"lms_public/lms_public_services_scrapers/#src.lms_public.services.scrapers.get_courses_suffix_urls","title":"<code>get_courses_suffix_urls(cookie)</code>  <code>async</code>","text":"<p>Get the course codes from LMS. Sends request to home page. Parses the text using bs4. Args:     cookie (str): An LMSCookie instance</p> <p>Returns:</p> Type Description <code>list[tuple[str, str]]</code> <p>list[tuple[str, str]]: List of (course_suffix_url, course_name) tuples</p> Source code in <code>src/lms_public/services/scrapers.py</code> <pre><code>async def get_courses_suffix_urls(\n    cookie: LMSCookie,\n) -&gt; list[tuple[str, str]]:\n    \"\"\"Get the course codes from LMS. Sends request to home page.\n    Parses the text using bs4.\n    Args:\n        cookie (str): An LMSCookie instance\n\n    Returns:\n        list[tuple[str, str]]: List of (course_suffix_url, course_name) tuples\n    \"\"\"\n    HOME_SUFFIX_URL = constants.HOME_SUFFIX_URL\n    page_text = await get_page_text(suffix_url=HOME_SUFFIX_URL, cookie=cookie)\n    soup = BeautifulSoup(page_text, \"html.parser\")\n    li_tags = soup.find(id=\"profile_groups\").find_all(\"li\")\n    courses_info = list()\n    for li_tag in li_tags:\n        course_suffix_url = li_tag.find(\"a\").get(\"href\")\n        course_name = li_tag.find_all(\"div\")[1].text.split(\"\\t\")[1].strip()\n        single_info = (course_suffix_url, course_name)\n        courses_info.append(single_info)\n    return courses_info\n</code></pre>"},{"location":"lms_public/lms_public_services_scrapers/#src.lms_public.services.scrapers.get_page_text","title":"<code>get_page_text(suffix_url, cookie)</code>  <code>async</code>","text":"<p>Get the page text from LMS. Sends request to URL and return the text. Encoding is set to response.charset (UTF-8). However, some messages have have character which cannot be decoded. So, <code>errors=\"replace\"</code> is used.</p> <p>Parameters:</p> Name Type Description Default <code>suffix_url</code> <code>str</code> <p>URL to send request to</p> required <code>cookie</code> <code>LMSCookie</code> <p>An LMSCookie instance</p> required <p>Returns:</p> Type Description <code>str</code> <p>Page text</p> Source code in <code>src/lms_public/services/scrapers.py</code> <pre><code>async def get_page_text(suffix_url: str, cookie: LMSCookie) -&gt; str:\n    \"\"\"Get the page text from LMS. Sends request to URL and return the text.\n    Encoding is set to response.charset (UTF-8). However, some messages have\n    have character which cannot be decoded. So, `errors=\"replace\"` is used.\n\n    Args:\n        suffix_url (str): URL to send request to\n        cookie (LMSCookie): An LMSCookie instance\n\n    Returns:\n        (str): Page text\n    \"\"\"\n    BASE_URL = constants.BASE_URL\n\n    async with aiohttp.ClientSession(\n        base_url=BASE_URL, cookies=cookie.as_dict\n    ) as session:\n        async with session.get(url=suffix_url) as response:\n            if response.status == 200:\n                return await response.text(\n                    encoding=response.charset, errors=\"replace\"\n                )\n            return \"\"\n</code></pre>"}]}